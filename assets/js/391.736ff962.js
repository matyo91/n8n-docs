(window.webpackJsonp=window.webpackJsonp||[]).push([[391],{1350:function(a,t,s){"use strict";s.r(t);var e=s(25),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"use-n8n-via-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-n8n-via-cli"}},[a._v("#")]),a._v(" Use n8n via CLI")]),a._v(" "),s("h2",{attrs:{id:"start-a-workflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#start-a-workflow"}},[a._v("#")]),a._v(" Start a workflow")]),a._v(" "),s("p",[a._v("Workflows can not only be started by triggers, webhooks, or manually via the Editor. It is also possible to start them directly via the CLI.")]),a._v(" "),s("p",[a._v("Execute a saved workflow by its ID:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("n8n execute --id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("p",[a._v("Execute a workflow from a workflow file:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("n8n execute --file "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("WORKFLOW_FILE"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("h2",{attrs:{id:"change-the-active-status-of-a-workflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#change-the-active-status-of-a-workflow"}},[a._v("#")]),a._v(" Change the active status of a workflow")]),a._v(" "),s("p",[a._v("You can also change the active status of a workflow via the CLI.")]),a._v(" "),s("p",[a._v("Set the active status of a workflow by its ID to false:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("n8n update:workflow --id"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" --active"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("false\n")])])]),s("p",[a._v("Set the active status of a workflow by its ID to true:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("n8n update:workflow --id"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" --active"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\n")])])]),s("p",[a._v("Set the active status to false for all the workflows:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("n8n update:workflow --all --active"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("false\n")])])]),s("p",[a._v("Set the active status to true for all the workflows:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("n8n update:workflow --all --active"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);